-- =====================================================
-- CHUCK WAGON ALLERG√àNES - NOUVEAU SYST√àME DE CAT√âGORIES
-- Date: 27 janvier 2025
-- Version: 2.0.0 - Ajout des sous-cat√©gories
-- =====================================================

/*
  # Nouveau syst√®me de cat√©gories avec sous-cat√©gories

  1. Nouvelles colonnes
    - Ajouter `sous_categorie` √† la table dishes
    - Mettre √† jour les contraintes pour les nouvelles cat√©gories

  2. Nouvelles cat√©gories
    - Entr√©es (avec 5 sous-cat√©gories)
    - Plats (sans sous-cat√©gorie)
    - Desserts (avec 3 sous-cat√©gories)
    - Sauces (avec 2 sous-cat√©gories)
    - Accompagnements, Garniture, Fromages, Huiles (sans sous-cat√©gorie)
    - Natama, Halal, Casher, Boissons chaudes (nouvelles cat√©gories)

  3. Migration des donn√©es
    - Mapper les anciennes cat√©gories vers les nouvelles
    - Conserver toutes les donn√©es existantes
*/

-- =====================================================
-- 1. AJOUTER LA COLONNE SOUS_CATEGORIE
-- =====================================================

-- Ajouter la colonne sous_categorie si elle n'existe pas
DO $$
BEGIN
  IF NOT EXISTS (
    SELECT 1 FROM information_schema.columns 
    WHERE table_name = 'dishes' AND column_name = 'sous_categorie'
  ) THEN
    ALTER TABLE dishes ADD COLUMN sous_categorie text;
    RAISE NOTICE '‚úÖ Colonne sous_categorie ajout√©e';
  ELSE
    RAISE NOTICE '‚ÑπÔ∏è Colonne sous_categorie existe d√©j√†';
  END IF;
END $$;

-- =====================================================
-- 2. SUPPRIMER L'ANCIENNE CONTRAINTE DE CAT√âGORIE
-- =====================================================

-- Supprimer l'ancienne contrainte
ALTER TABLE dishes DROP CONSTRAINT IF EXISTS dishes_categorie_check;

-- =====================================================
-- 3. AJOUTER LA NOUVELLE CONTRAINTE AVEC TOUTES LES CAT√âGORIES
-- =====================================================

-- Nouvelle contrainte avec toutes les cat√©gories exactes
ALTER TABLE dishes ADD CONSTRAINT dishes_categorie_check 
  CHECK (categorie = ANY (ARRAY[
    'Entr√©es'::text,
    'Plats'::text,
    'Desserts'::text,
    'Sauces'::text,
    'Accompagnements'::text,
    'Garniture'::text,
    'Fromages'::text,
    'Huiles'::text,
    'Natama'::text,
    'Halal'::text,
    'Casher'::text,
    'Boissons chaudes'::text
  ]));

-- =====================================================
-- 4. AJOUTER LA CONTRAINTE POUR LES SOUS-CAT√âGORIES
-- =====================================================

-- Contrainte pour les sous-cat√©gories valides
ALTER TABLE dishes ADD CONSTRAINT dishes_sous_categorie_check 
  CHECK (
    sous_categorie IS NULL OR
    sous_categorie = ANY (ARRAY[
      -- Sous-cat√©gories pour Entr√©es
      'Bar √† Salades'::text,
      'Charcuterie'::text,
      'Produits de la mer'::text,
      'Soupes'::text,
      'Assortiment de graines et fruits secs'::text,
      -- Sous-cat√©gories pour Desserts
      'Desserts fruit√©s'::text,
      'Glaces'::text,
      'G√¢teau d''anniversaire'::text,
      -- Sous-cat√©gories pour Sauces
      'Sauces condiment'::text,
      'Sauces salade'::text
    ])
  );

-- =====================================================
-- 5. MIGRATION DES DONN√âES EXISTANTES
-- =====================================================

-- Mapper les anciennes cat√©gories vers les nouvelles
UPDATE dishes SET 
  categorie = CASE 
    WHEN categorie = 'entr√©es' THEN 'Entr√©es'
    WHEN categorie = 'plats' THEN 'Plats'
    WHEN categorie = 'desserts' THEN 'Desserts'
    WHEN categorie = 'sauces' THEN 'Sauces'
    WHEN categorie = 'salades' THEN 'Entr√©es'  -- Mapper salades vers Entr√©es
    WHEN categorie = 'garnitures' THEN 'Garniture'
    WHEN categorie = 'fromages' THEN 'Fromages'
    WHEN categorie = 'huiles' THEN 'Huiles'
    WHEN categorie = 'accompagnements' THEN 'Accompagnements'
    WHEN categorie = 'natama' THEN 'Natama'
    ELSE categorie
  END,
  sous_categorie = CASE 
    WHEN categorie = 'salades' THEN 'Bar √† Salades'  -- Mapper les salades vers Bar √† Salades
    ELSE NULL
  END
WHERE categorie IN ('entr√©es', 'plats', 'desserts', 'sauces', 'salades', 'garnitures', 'fromages', 'huiles', 'accompagnements', 'natama');

-- =====================================================
-- 6. METTRE √Ä JOUR LA TABLE DISH_MODIFICATIONS
-- =====================================================

-- Ajouter la colonne sous_categorie √† l'historique aussi
DO $$
BEGIN
  IF NOT EXISTS (
    SELECT 1 FROM information_schema.columns 
    WHERE table_name = 'dish_modifications' AND column_name = 'dish_sous_category'
  ) THEN
    ALTER TABLE dish_modifications ADD COLUMN dish_sous_category text;
    RAISE NOTICE '‚úÖ Colonne dish_sous_category ajout√©e √† l''historique';
  END IF;
END $$;

-- =====================================================
-- 7. METTRE √Ä JOUR LA FONCTION DE LOGGING
-- =====================================================

-- Fonction de logging mise √† jour pour inclure les sous-cat√©gories
CREATE OR REPLACE FUNCTION log_dish_modification()
RETURNS TRIGGER AS $$
DECLARE
    user_info RECORD;
    user_id_val uuid := null;
    user_email_val text := 'system';
    detection_method_val text := 'unknown';
BEGIN
    -- R√©cup√©rer les informations utilisateur
    BEGIN
        SELECT * INTO user_info FROM get_current_user_info() LIMIT 1;
        user_id_val := user_info.user_id;
        user_email_val := COALESCE(user_info.user_email, 'system');
        detection_method_val := COALESCE(user_info.detection_method, 'unknown');
    EXCEPTION WHEN OTHERS THEN
        user_id_val := null;
        user_email_val := 'system_error';
        detection_method_val := 'error: ' || SQLERRM;
    END;
    
    -- Logging selon le type d'op√©ration
    BEGIN
        IF TG_OP = 'INSERT' THEN
            INSERT INTO dish_modifications (
                dish_id, user_id, user_email, action_type, changes,
                dish_name, dish_category, dish_sous_category, user_detection_method
            )
            VALUES (
                NEW.id, user_id_val, user_email_val, 'created', to_jsonb(NEW),
                NEW.nom, NEW.categorie, NEW.sous_categorie, detection_method_val
            );
            RETURN NEW;
            
        ELSIF TG_OP = 'UPDATE' THEN
            INSERT INTO dish_modifications (
                dish_id, user_id, user_email, action_type, changes,
                dish_name, dish_category, dish_sous_category, user_detection_method
            )
            VALUES (
                NEW.id, user_id_val, user_email_val, 'updated', 
                jsonb_build_object('old', to_jsonb(OLD), 'new', to_jsonb(NEW)),
                NEW.nom, NEW.categorie, NEW.sous_categorie, detection_method_val
            );
            RETURN NEW;
            
        ELSIF TG_OP = 'DELETE' THEN
            INSERT INTO dish_modifications (
                dish_id, user_id, user_email, action_type, changes,
                dish_name, dish_category, dish_sous_category, user_detection_method
            )
            VALUES (
                OLD.id, user_id_val, user_email_val, 'deleted', 
                jsonb_build_object(
                    'deleted_dish', to_jsonb(OLD),
                    'deletion_timestamp', now(),
                    'deletion_reason', 'Manual deletion by admin'
                ),
                OLD.nom, OLD.categorie, OLD.sous_categorie, detection_method_val
            );
            RETURN OLD;
        END IF;
    EXCEPTION WHEN OTHERS THEN
        RAISE WARNING 'Erreur lors du logging: %', SQLERRM;
        IF TG_OP = 'DELETE' THEN
            RETURN OLD;
        ELSE
            RETURN NEW;
        END IF;
    END;
    
    RETURN NULL;
END;
$$ LANGUAGE plpgsql;

-- =====================================================
-- 8. FONCTION DE TEST AVEC NOUVELLES CAT√âGORIES
-- =====================================================

-- Fonction pour tester les nouvelles cat√©gories
CREATE OR REPLACE FUNCTION test_new_categories()
RETURNS text AS $$
DECLARE
    test_dish_id uuid;
    result_text text := '';
BEGIN
    result_text := 'üß™ TEST DES NOUVELLES CAT√âGORIES' || E'\n';
    result_text := result_text || '===============================' || E'\n';
    
    -- Test cr√©ation avec sous-cat√©gorie
    BEGIN
        INSERT INTO dishes (nom, categorie, sous_categorie, langue, ingredients, allergenes)
        VALUES ('Test Nouvelle Cat√©gorie', 'Entr√©es', 'Bar √† Salades', 'fr', ARRAY['test']::text[], ARRAY[]::text[])
        RETURNING id INTO test_dish_id;
        
        result_text := result_text || '‚úÖ Cr√©ation avec sous-cat√©gorie: OK' || E'\n';
        
        -- Nettoyer
        DELETE FROM dishes WHERE id = test_dish_id;
        
    EXCEPTION WHEN OTHERS THEN
        result_text := result_text || '‚ùå Cr√©ation avec sous-cat√©gorie: ' || SQLERRM || E'\n';
    END;
    
    -- Test cr√©ation sans sous-cat√©gorie
    BEGIN
        INSERT INTO dishes (nom, categorie, langue, ingredients, allergenes)
        VALUES ('Test Sans Sous-Cat√©gorie', 'Plats', 'fr', ARRAY['test']::text[], ARRAY[]::text[])
        RETURNING id INTO test_dish_id;
        
        result_text := result_text || '‚úÖ Cr√©ation sans sous-cat√©gorie: OK' || E'\n';
        
        -- Nettoyer
        DELETE FROM dishes WHERE id = test_dish_id;
        
    EXCEPTION WHEN OTHERS THEN
        result_text := result_text || '‚ùå Cr√©ation sans sous-cat√©gorie: ' || SQLERRM || E'\n';
    END;
    
    result_text := result_text || '===============================' || E'\n';
    
    RETURN result_text;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Ex√©cuter le test
SELECT test_new_categories();

-- =====================================================
-- 9. MESSAGES DE SUCC√àS
-- =====================================================

DO $$
DECLARE
    total_dishes integer;
    categories_count integer;
    subcategories_count integer;
BEGIN
    -- Compter les plats
    SELECT COUNT(*) INTO total_dishes FROM dishes;
    
    -- Compter les cat√©gories distinctes
    SELECT COUNT(DISTINCT categorie) INTO categories_count FROM dishes;
    
    -- Compter les sous-cat√©gories distinctes
    SELECT COUNT(DISTINCT sous_categorie) INTO subcategories_count 
    FROM dishes WHERE sous_categorie IS NOT NULL;
    
    -- Messages de succ√®s
    RAISE NOTICE '';
    RAISE NOTICE 'üéâ NOUVEAU SYST√àME DE CAT√âGORIES IMPL√âMENT√â !';
    RAISE NOTICE '==========================================';
    RAISE NOTICE '';
    RAISE NOTICE 'üìä STATISTIQUES :';
    RAISE NOTICE '   ‚úÖ Total plats : % plats', total_dishes;
    RAISE NOTICE '   ‚úÖ Cat√©gories actives : % cat√©gories', categories_count;
    RAISE NOTICE '   ‚úÖ Sous-cat√©gories actives : % sous-cat√©gories', subcategories_count;
    RAISE NOTICE '';
    RAISE NOTICE 'üìã NOUVELLES CAT√âGORIES DISPONIBLES :';
    RAISE NOTICE '   ‚Ä¢ Entr√©es (5 sous-cat√©gories)';
    RAISE NOTICE '   ‚Ä¢ Plats (sans sous-cat√©gorie)';
    RAISE NOTICE '   ‚Ä¢ Desserts (3 sous-cat√©gories)';
    RAISE NOTICE '   ‚Ä¢ Sauces (2 sous-cat√©gories)';
    RAISE NOTICE '   ‚Ä¢ Accompagnements, Garniture, Fromages, Huiles';
    RAISE NOTICE '   ‚Ä¢ Natama, Halal, Casher, Boissons chaudes';
    RAISE NOTICE '';
    RAISE NOTICE 'üîÑ MIGRATION DES DONN√âES :';
    RAISE NOTICE '   ‚úÖ Anciennes cat√©gories mapp√©es vers nouvelles';
    RAISE NOTICE '   ‚úÖ Salades ‚Üí Entr√©es / Bar √† Salades';
    RAISE NOTICE '   ‚úÖ Contraintes mises √† jour';
    RAISE NOTICE '';
    RAISE NOTICE 'üöÄ PR√äT POUR L''INTERFACE !';
END $$;

-- =====================================================
-- FIN DE LA MIGRATION
-- =====================================================